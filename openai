#!/usr/bin/env bash

[ -z "$OPENAI_API_KEY" ] && {
	echo "OPENAI_API_KEY is not defined";
	exit 1;
}

./deps curl jq openssl

case "$1" in 

	"chat" )

		shift
		model=${OPENAI_DEFAULT_MODEL:-'gpt-3.5-turbo'}
		system_prompt='You are a helpful assistant, answering succintly without going into lots of detail, unless you are asked to. Do not make things up if you do not know the answer. And write like one would speak (do not use abbreviations, wherever possible).'
		user_messages=()
		assistant_messages=()

		# If $1 is set, add it as the first user message
		if [ -n "$1" ]; then
			user_messages+=("$1")
		else
			# Read from stdin
			while IFS= read -r line; do
				user_messages+=("$line")
				break  # Exit after the first line of input
			done < /dev/stdin
		fi

		shift
		while [[ "$#" -gt 0 ]]; do
			case $1 in
				--model) model="$2"; shift ;;
				--system_prompt) system_prompt="$2"; shift ;;
				--user_messages) user_messages+=("$2"); shift ;;
				--assistant_messages) assistant_messages+=("$2"); shift ;;
				--messages) messages=$(echo "$2" | jq -c .); shift ;;
				*) echo "Invalid option: $1" >&2 && exit 1 ;;
			esac
			shift
		done

		if [ -z "$messages" ]; then
			messages='[
			  {
				"role": "system",
				"content": "'"$system_prompt"'"
			  }'

			for i in "${!user_messages[@]}"; do
				messages+=',{
					"role": "user",
					"content": "'"${user_messages[$i]}"'"
				  }'
				if [ "$i" -lt ${#assistant_messages[@]} ]; then
					messages+=',{
						"role": "assistant",
						"content": "'"${assistant_messages[$i]}"'"
					  }'
				fi
			done

			messages+=']'
		fi

		response=$(curl -s https://api.openai.com/v1/chat/completions \
			-H "Content-Type: application/json" \
			-H "Authorization: Bearer $OPENAI_API_KEY" \
			-d '{
			"model": "'"$model"'",
			"messages": '"$messages"'
		}');
		echo "$response" | jq -r '.choices[0].message.content'
		;;


	"voice" )
		
		shift
		model='tts-1'
		voice='alloy'
		response_format='mp3'
		speed=1
	
		# Check if $1 is provided
		if [ -n "$1" ]; then
			input="$1"
		elif [ -t 0 ]; then  # Check if stdin is connected to a terminal
			echo "Error: No input provided. Please provide input as an argument or through stdin." >&2
			exit 1
		else
			read -r input
		fi

		output="$(./bare random string 32).mp3"

		while getopts "m:i:v:f:s:o:" opt; do
			case $opt in
				m ) model=$OPTARG ;;
				i ) input=$OPTARG ;;
				v ) voice=$OPTARG ;;
				f ) response_format=$OPTARG ;;
				s ) speed=$OPTARG ;;
				o ) output=$OPTARG ;;
				\? ) echo "Invalid option: $OPTARG" >&2 && exit 1 ;;
				: ) echo "Option -$OPTARG requires an argument." >&2 && exit 1 ;;
			esac
		done

		curl -s https://api.openai.com/v1/audio/speech \
			-H "Authorization: Bearer $OPENAI_API_KEY" \
			-H "Content-Type: application/json" \
			-d '{
				"model": "'"$model"'",
				"input": "'"$input"'",
				"voice": "'"$voice"'",
				"response_format": "'"$response_format"'",
				"speed": "'"$speed"'"
			}' \
			--output "./.downloads/$output"

		# Check if the file was created and is not empty
		if [ ! -s "./.downloads/$output" ]; then
			echo "Error: File $output was not created or is empty" >&2
			exit 1
		fi

		echo "./.downloads/$output"

		;;
	"listen" )

		# Coming soon. OpenAI only accepts text and image as of now.

		;;


	"transcribe" )

		shift
		model='whisper-1'
		language='en'
		prompt=''
		response_format='json'
		temperature=0
		timestamp_granularities='segment'
		file="$1" && shift

		while [[ "$#" -gt 0 ]]; do
			case $1 in
				--model) model="$2"; shift ;;
				--language) language="$2"; shift ;;
				--prompt) prompt="$2"; shift ;;
				--response_format) response_format="$2"; shift ;;
				--temperature) temperature="$2"; shift ;;
				--timestamp_granularities) timestamp_granularities="$2"; shift ;;
				*) echo "Invalid option: $1" >&2 && exit 1 ;;
			esac
			shift
		done

		if [ -z "$file" ]; then
			read -r file
			if [ -z "$file" ]; then
				echo "Error: No file path provided" >&2
				exit 1
			fi
		fi
		
		if [ ! -f "$file" ]; then
			echo "Error: File '$file' not found" >&2
			exit 1
		fi

		# Check if the file size is greater than 20MB (20 * 1024 * 1024 bytes)
		file_size=$(stat -f%z "$file")
		max_size=$((20 * 1024 * 1024))
		if [ "$file_size" -gt "$max_size" ]; then
			echo "Warning: Files larger than 20MB are not supported. The transcription may fail." >&2
			# Optionally, exit or continue based on your requirements
			# exit 1
		fi
		
		response=$(curl -s https://api.openai.com/v1/audio/transcriptions \
			-H "Authorization: Bearer $OPENAI_API_KEY" \
			-H "Content-Type: multipart/form-data" \
			-F file="@$file" \
			-F model="$model" \
			-F language="$language" \
			-F prompt="$prompt" \
			-F response_format="$response_format" \
			-F temperature="$temperature" \
			-F timestamp_granularities="$timestamp_granularities")
		
		# Extract the text property from the JSON response and print it
		echo "$response" | jq -r '.text'
		;;

	* )
		echo "Invalid argument"
		exit 1
		;;
esac