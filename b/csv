#!/usr/bin/env bash
# Interface with CSV files
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

# ================================== DOC ===================================

declare doc_name="csv"
declare doc_description="Interface with CSV files"

declare -a doc_options=(
	"limit"		"Print the first n lines of a csv file"
	"dedupe"	"Deduplicate a csv file"
	"filter"	"Filter a csv file based on a given column and match string"
	"math"		"Perform math operations on a csv file"
) && [[ "$1" == '--inspect' ]] && return 0

# ==========================================================================



command="$1" && shift

case $command in

	math )

		# ============== DOC ==============
		doc_name+=" math"
		doc_description="Perform math operations on a csv file"
		declare -a doc_options=(
			"-f"		"* The file to perform operations on"
			"-c"		"* The column(s) to perform math on"
			"-o"		"* The operation to perform"
		) && [[ "$1" == '--inspect' ]] && return 0
		# ================================

		while getopts "f:c:o:" opt; do
			case $opt in
				f ) file=$OPTARG ;; #file to perform operations on
				c ) columns=$OPTARG ;; #columns given as comma separated list
				o ) operation=$OPTARG ;; #operation to perform
				\? ) echo "Invalid option: -$OPTARG" >&2 ;;
			esac
		done

		[[ -z $file ]] && echo "No file specified to perform operations on" && exit 1
		[[ -z $columns ]] && echo "No columns specified to perform math on" && exit 1

		declare -a valid_operations=(
			"sum"		"mean"		"median"
			"mode"		"min"		"max"
			"range"		"variance"	"std_dev"
			"unique" 	"count"
		)

		# Check if operation is valid
		valid=false
		for valid_operation in "${valid_operations[@]}"; do
			if [[ $valid_operation == $operation ]]; then
				valid=true
				break
			fi
		done

		if [[ $valid == true ]]; then
			csvstat -c "$columns" --"$operation" "$file"
		else b/error invalid_operation "Invalid operation: $operation"; fi
		;;

	limit )

		# ============== DOC ==============
		doc_name+=" limit"
		doc_description="Print the first n lines of a csv file"
		declare -a doc_options=(
			"-f"		"* The file to perform operations on"
			"-o"		"= The output file"
			"-P"		"  Print the output"
			"-J"		"  Return the output as JSON"
		) && [[ "$1" == '--inspect' ]] && return 0
		# ================================

		while getopts "f:o:PJ" opt; do
			case $opt in
				f ) file=$OPTARG ;; #file to perform operations on
				o ) output_file=$OPTARG ;; #output file
				P ) print=true ;;
				J ) return_json=true ;;
				\? ) echo "Invalid option: -$OPTARG" >&2 ;;
			esac
		done

		[[ -z $file ]] && echo "No file specified to perform operations on" && exit 1

		# Check if the file exists
		[[ ! -f $file ]] && b/error file_not_found "File not found: $file" && exit 1

		;;

	dedupe )

		# ============== DOC ==============
		doc_name+=" dedupe"
		doc_description="Deduplicate a csv file"
		declare -a doc_options=(
			"-f"		"* The file to perform operations on"
			"-o"		"= The output file"
			"-d"		"= The columns to deduplicate on"
		) && [[ "$1" == '--inspect' ]] && return 0
		# ================================

		while getopts "f:o:d:" opt; do
			case $opt in
				f ) file=$OPTARG ;; #file to perform operations on
				o ) output=$OPTARG ;; #output deduped
				d ) columns=$OPTARG ;; #columns given as comma separated list
				\? ) echo "Invalid option: -$OPTARG" >&2 ;;
			esac
		done

		;;

	filter )

		# ============== DOC ==============
		doc_name+=" filter"
		doc_description="Filter a csv file based on a given column and match string"
		declare -a doc_options=(
			"-f"		"* The file to perform operations on"
			"-c"		"* The column(s) to filter on"
			"-m"		"= The match string"
			"-b"		"= Match strings that begin with the given string"
			"-C"		"  Perform a case insensitive match"
		) && [[ "$1" == '--inspect' ]] && return 0
		# ================================

		while getopts "f:c:m:b:C" opt; do
			case $opt in
				f ) file=$OPTARG ;; #file to perform operations on
				c ) columns=$OPTARG ;; #columns given as comma separated list
				m ) match=$OPTARG ;; #match string
				b ) begins_with=$OPTARG ;; #match string
				C ) case_insensitive=true ;; #case insensitive match
				\? ) echo "Invalid option: -$OPTARG" >&2 ;;
			esac
		done

		;;

esac