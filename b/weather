#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

# Request current weather from weather.gov

if [[ -z $1 ]]; then
	location="$(b/geo)"
	type='current'
elif [[ $1 == 'forecast' ]]; then
	type='forecast'
	location="$(b/geo "$2")"
elif [[ $1 == 'tomorrow' ]]; then
	type='tomorrow'
	location="$(b/geo "$2")"
else
	location="$(b/geo "$1")"
	type='current'
fi

weather_options=$(curl -sL "https://api.weather.gov/points/$location")

if [[ $type == 'current' ]]; then
	weather_endpoint=$(echo "$weather_options" | jq -r '.properties.forecastHourly')
else
	weather_endpoint=$(echo "$weather_options" | jq -r '.properties.forecast')
fi

# Fetch the weather data
if [[ $type == 'current' ]]; then
	weather=$(curl -sL "$weather_endpoint" | jq '.properties.periods[0]')
elif [[ $type == 'forecast' || $type == 'tomorrow' ]]; then
	weather=$(curl -sL "$weather_endpoint" | jq '.properties.periods')
fi

declare -A directions=(
	["N"]="‚Üë"
	["NNE"]="‚Üó"
	["NE"]="‚Üó"
	["ENE"]="‚Üí"
	["E"]="‚Üí"
	["ESE"]="‚Üò"
	["SE"]="‚Üò"
	["SSE"]="‚Üì"
	["S"]="‚Üì"
	["SSW"]="‚Üô"
	["SW"]="‚Üô"
	["WSW"]="‚Üê"
	["W"]="‚Üê"
	["WNW"]="‚Üñ"
	["NW"]="‚Üñ"
	["NNW"]="‚Üë"
)

# summary with emoji

getTemperatureEmoji() {
	local temp=$(echo "$1" | jq -r '.temperature')
	local condition=$(echo "$1" | jq -r '.shortForecast')
	if (( temp <= 36 )); then
		echo " ü•∂"  # Freezing
	elif (( temp >= 65 && temp <= 75 )) && [[ $condition == *"Sunny"* || $condition == *"Partly"* ]]; then
		echo " üòä"  # Pleasant
	elif (( temp >= 84 )); then
		echo " ü•µ"  # Hot
	fi
}

getSummary() {
	local name=$(echo "$1" | jq -r '.name')
	local condition=$(echo "$1" | jq -r '.shortForecast')
	local temp=$(echo "$1" | jq -r '.temperature')¬∞$(echo "$1" | jq -r '.temperatureUnit')
	local temp_emoji=$(getTemperatureEmoji "$1")
	local wind=$(echo "$1" | jq -r '.windSpeed')
	local wind_dir=$(echo "$1" | jq -r '.windDirection')
	local humidity=$(echo "$1" | jq -r '.relativeHumidity.value')%
	local precip=$(echo "$1" | jq -r '.probabilityOfPrecipitation.value')%
	# Handle null and 0% precipitation
	if [[ $precip == "null%" || $precip == "0%" ]]; then
		precip=""
	else
		precip=" ($precip) "
	fi
	# Determine emoji based on condition
	local emoji="‚òÄÔ∏è" # Default to sunny
	[[ $condition == *"Cloudy"* ]] && emoji="‚òÅÔ∏è "
	[[ $condition == *"Partly"* || $condition == *"Mostly"* ]] && emoji="üå§Ô∏è "
	[[ $condition == *"Rain"* || $condition == *"Showers"* ]] && emoji="üåßÔ∏è "
	[[ $condition == *"Snow"* ]] && emoji="‚ùÑÔ∏è "
	[[ $condition == *"Fog"* ]] && emoji="üå´Ô∏è "
	[[ $condition == *"Thunder"* ]] && emoji="‚ö°Ô∏è "
	if [[ $type == "current" ]]; then
		echo -e "$temp$temp_emoji $emoji$condition ${directions[$wind_dir]} $wind${wind_dir:+ $wind_dir}"
	else
		echo -e "$name $temp$temp_emoji $emoji$condition ${directions[$wind_dir]} $wind${wind_dir:+ $wind_dir}"
	fi
}

[[ $type == "current" ]] && getSummary "$weather"
[[ $type == "forecast" ]] && {
	# take json array, and get summary for each item
	echo "$weather" | jq -c '.[]' | while read -r period; do
		getSummary "$period"
	done
}
[[ $type == "tomorrow" ]] && {
	# take json array, and get summary for each item
	periods=$(echo "$weather" | jq -r 'length')
	for (( i=0; i<$periods; i++ )); do
		period=$(echo "$weather" | jq -c ".[$i]")
		name=$(echo "$period" | jq -r '.name')
		# Only process periods for tomorrow
		if [[ $name == "Tomorrow" || $name == "Tomorrow Night" ]]; then
			getSummary "$period"
		fi
	done
}

exit 0