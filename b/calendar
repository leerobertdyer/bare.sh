#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

generate_calendar() {
	local months="$1"
	local direction="$2"
	for ((i=0; i<$months; i++)); do
		if [[ "$OSTYPE" == "darwin"* ]]; then
			# macOS uses BSD date
			if [ "$direction" = "ahead" ]; then
				cal $(date -v +${i}m +%m) $(date -v +${i}m +%Y)
			else
				cal $(date -v -${i}m +%m) $(date -v -${i}m +%Y)
			fi
		else
			# Assume GNU date
			if [ "$direction" = "ahead" ]; then
				cal $(date -d "+${i} month" +%m) $(date -d "+${i} month" +%Y)
			else
				cal $(date -d "-${i} month" +%m) $(date -d "-${i} month" +%Y)
			fi
		fi
	done
}

# Function to remove empty lines from the output
remove_empty_lines() {
	echo "$1" | awk 'NF > 0'
}

# Function to generate a specific month N months ahead or behind
generate_specific_month() {
	local offset="$1"
	if [ "$2" = "ahead" ]; then
		cal $(date -v +${offset}m +%m) $(date -v +${offset}m +%Y)
	else
		cal $(date -v -${offset}m +%m) $(date -v -${offset}m +%Y)
	fi
}

# Using bash, when given no arguments, simply print the current month (using `cal`)
if [ $# -eq 0 ]; then
	today=$(date +%e)
	result=$(cal | awk -v today="$today" '{ if (NF > 0) gsub(today, "\033[1;33m"today"\033[0m"); print }')
	remove_empty_lines "$result"
	exit 0
fi

# When given 'ahead 3' or 'ahead for 3', print the next 3 months (or 4 if given '4')
if [ "$1" = "ahead" ] && [ "$2" != "by" ]; then
	if [[ "$2" =~ ^[0-9]+$ ]]; then
		months=$2
	else
		months=${3:-1}
	fi
	result=$(generate_calendar "$months" "ahead")
	remove_empty_lines "$result"
	exit 0
fi

# When given 'behind 3' or 'behind for 3', print the previous 3 months (or 4 if given '4')
if [ "$1" = "behind" ] && [ "$2" != "by" ]; then
	if [[ "$2" =~ ^[0-9]+$ ]]; then
		months=$2
	else
		months=${3:-1}
	fi
	result=$(generate_calendar "$months" "behind")
	remove_empty_lines "$result"
	exit 0
fi

# When given 'ahead by 3', print the specific month 3 months ahead
if [ "$1" = "ahead" ] && [ "$2" = "by" ]; then
	if [[ "$3" =~ ^[0-9]+$ ]]; then
		months=$3
	else
		months=1
	fi
	result=$(generate_specific_month "$months" "ahead")
	clean_result=$(remove_empty_lines "$result")
	echo "$clean_result"
	exit 0
fi

# When given 'behind by 3', print the specific month 3 months behind
if [ "$1" = "behind" ] && [ "$2" = "by" ]; then
	if [[ "$3" =~ ^[0-9]+$ ]]; then
		months=$3
	else
		months=1
	fi
	result=$(generate_specific_month "$months" "behind")
	clean_result=$(remove_empty_lines "$result")
	echo "$clean_result"
	exit 0
fi
