#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

# ================================== DOC ===================================
declare doc_name="notes"
declare doc_description="Manage notes with nb"
declare -a doc_options=(
	"notebooks.create"	"Create a new notebook"
	"notebooks.list"	"List notebooks"
	"list"				"List notes"
	"show"				"Show a note"
	"create"			"Create a new note"
	"edit"				"Edit a note"
	"delete"			"Delete a note"
) && [[ "$1" == '--inspect' ]] && return 0

command="$1"
shift

# make sure we've initialized the notes
[[ ! -d $BARE_NOTES_DIR ]] && nb init > /dev/null 2>&1

case $command in

	notebooks.create )
	
		# ============== DOC ==============
		doc_name+=" notebooks.create"
		doc_description="Create a new notebook"
		declare -a doc_options=(
			"-n"		"* Name of the notebook"
		) && [[ "$1" == '--inspect' ]] && return 0

		while getopts "n:" opt; do
			case $opt in
				n ) name=$OPTARG ;;
				\? ) echo "Invalid option: -$OPTARG" && exit 1 ;;
				: ) echo "Option -$OPTARG requires an argument." && exit 1 ;;
			esac
		done

		# create a new notebook with nb
		nb notesbooks add "$name"
		;;

	notebooks.list )

		nb notebooks
		;;

    list )

		doc_name+=" list"
		doc_description="List notes"
		declare -a doc_options=(
			"-l"		"Limit the number of notes to display"
		) && [[ "$1" == '--inspect' ]] && return 0

        limit=10

        while getopts "l:" opt; do
            case $opt in
                l )
                    limit=$OPTARG ;;
                \? )
                    echo "Invalid option: -$OPTARG" 1>&2
                    exit 1
                    ;;
            esac
        done

        nb list --limit "$limit" --no-color
        ;;

    show )

        file="$1"
        nb show "$file" --print
        ;;

    create )

		doc_name+=" create"
		doc_description="Create a new note"
		declare -a doc_options=(
			"-T"		"Title of the note"
			"-C"		"Content of the note"
			"-t"		"Comma-separated tags for the note (my-tag,tag2,another-tag)"
			"-E"		"Encrypt the note"
			"-P"		"Password for the note"
			"-N"		"Notebook to save the note in (defaults to 'home')"
			"-F"		"Folder to save the note in"
			"-f"		"Filename for the note"
		) && [[ "$1" == '--inspect' ]] && return 0

        notebook="home"
        content=""
        while getopts "T:C:t:EP:N:F:f:" opt; do
            case $opt in
                T ) title=$OPTARG ;;
                C ) content=$OPTARG ;;
                t ) tags=$OPTARG ;;
                E ) encrypt=$OPTARG ;;
                P ) password=$OPTARG ;;
                N ) notebook=$OPTARG ;;
                F ) folder=$OPTARG ;;
                f ) filename=$OPTARG ;;
                \? )
                    echo "Invalid option: -$OPTARG" 1>&2
                    exit 1
                    ;;
                : )
                    echo "Option -$OPTARG requires an argument." 1>&2
                    exit 1
                    ;;
            esac
        done

        # make sure content is set
        [ -z "$content" ] && echo "Error: Content is required" && exit 1

        # if -E is set, -P must also be set
        [ -n "$encrypt" ] && [ -z "$password" ] && echo "Error: Encryption flag (-E) requires a password (-P)" && exit 1

        command=("nb" "$notebook:add" --no-color)

        [ -n "$title" ] && command+=("--title" "$title")
        [ -n "$content" ] && command+=("--content" "$content")
        [ -n "$tags" ] && command+=("--tags" "$tags")
        [ -n "$password" ] && command+=("-e" "--password" "$password")
        [ -n "$folder" ] && command+=("--folder" "$folder")
        [ -n "$filename" ] && command+=("--filename" "$filename")

        format_nb_response() {
            input="$1"
            id=$(echo "$input" | awk -F'[][]' '{print $2}')
            filename=$(echo "$input" | awk '{print $3}')
            title=$(echo "$input" | awk -F'\"' '{print $2}')
            # echo as json
            echo "{\"id\":\"$id\",\"filename\":\"$filename\",\"title\":\"$title\"}"
        }

        output=$("${command[@]}")
        format_nb_response "$output"
        ;;

    edit )

		doc_name+=" edit"
		doc_description="Edit a note"
		declare -a doc_options=(
			"-n"		"ID of the note"
			"-T"		"Title of the note"
			"-C"		"Content of the note"
			"-t"		"Comma-separated tags for the note (my-tag,tag2,another-tag)"
			"-E"		"Encrypt the note"
			"-P"		"Password for the note"
			"-N"		"Notebook to save the note in (defaults to 'home')"
			"-F"		"Folder to save the note in"
			"-f"		"Filename for the note"
		) && [[ "$1" == '--inspect' ]] && return 0

        notebook="home"
        content=""
        while getopts "n:T:C:t:EP:N:F:f:" opt; do
            case $opt in
                n ) id=$OPTARG ;;
                T ) title=$OPTARG ;;
                C ) content=$OPTARG ;;
                t ) tags=$OPTARG ;;
                E ) encrypt=$OPTARG ;;
                P ) password=$OPTARG ;;
                N ) notebook=$OPTARG ;;
                F ) folder=$OPTARG ;;
                f ) filename=$OPTARG ;;
                \? )
                    echo "Invalid option: -$OPTARG" 1>&2
                    exit 1
                    ;;
                : )
                    echo "Option -$OPTARG requires an argument." 1>&2
                    exit 1
                    ;;
            esac
        done

        # if -E is set, -P must also be set
        [ -n "$encrypt" ] && [ -z "$password" ] && echo "Error: Encryption flag (-E) requires a password (-P)" && exit 1

        command=("nb" "_edit" --print --no-color)

        [ -n "$id" ] && command+=("--id" "$id")
        [ -n "$title" ] && command+=("--title" "$title")
        [ -n "$content" ] && command+=("--content" "$content")
        [ -n "$tags" ] && command+=("--tags" "$tags")
        [ -n "$password" ] && command+=("-e" "--password" "$password")
        [ -n "$folder" ] && command+=("--folder" "$folder")
        [ -n "$filename" ] && command+=("--filename" "$filename")

        format_nb_response() {
            input="$1"
            id=$(echo "$input" | awk -F'[][]' '{print $2}')
            filename=$(echo "$input" | awk '{print $3}')
            title=$(echo "$input" | awk -F'\"' '{print $2}')
            # echo as json
            echo "{\"id\":\"$id\",\"filename\":\"$filename\",\"title\":\"$title\"}"
        }

        output=$("${command[@]}")
        format_nb_response "$output"

        ;;

    delete )

		doc_name+=" delete"
		doc_description="Delete a note"
		declare -a doc_options=(
			"-f"		"Filename of the note"
		) && [[ "$1" == '--inspect' ]] && return 0

        file="$1"
        nb delete "$file" --force
        ;;

    * ) echo "Invalid command: $command" ;;
	
esac