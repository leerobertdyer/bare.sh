#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

# ================================== DOC ===================================
declare doc_name="notes"
declare doc_description="Manage notes with nb"
declare -a doc_options=(
	"notebooks.create"	"Create a new notebook"
	"notebooks.list"	"List notebooks"
	"list"				"List notes"
	"show"				"Show a note"
	"create"			"Create a new note"
	"edit"				"Edit a note"
	"delete"			"Delete a note"
) && [[ "$1" == '--inspect' ]] && return 0

command="$1"
shift

# make sure nb home notebook is present
[[ ! -d $BARE_NOTES_DIR/home ]] && nb notebooks add home > /dev/null 2>&1

# make sure we've initialized the notes
[[ ! -d $BARE_NOTES_DIR ]] && nb init > /dev/null 2>&1

case $command in

	notebooks.create )
		nb notebooks add "$1"
		;;

	notebooks.list )
		nb notebooks --no-color
		;;

	notebook.rename )
		nb notebooks rename "$1" "$2" --no-color
		;;

	notebook.delete )
		# make sure the notebook exists
		nb notebooks delete "$1" --force --no-color
		;;

    list )

		doc_name+=" list"
		doc_description="List notes"
		declare -a doc_options=(
			"-l"		"Limit the number of notes to display"
		) && [[ "$1" == '--inspect' ]] && return 0

		declare -a args=()
		args+=("--no-color" "--no-indicator" "--filenames")
		while getopts "l:t:rN:" opt; do
			case $opt in
				l ) args+=("--limit" "$OPTARG"); shift 2 ;;
				t ) args+=("--type" "$OPTARG"); shift 2 ;;
				r ) args+=("--reverse"); shift 1 ;;
				N ) notebook=$OPTARG; shift 2 ;;
				\? )
					echo "Invalid option: -$OPTARG" 1>&2
					exit 1
					;;
			esac
		done
		scope=${1:-"home:"}
		args+=("$scope")

        list=$(nb list "${args[@]}")
		[[ $(echo "$list" | head -n 1) == "0 items." ]] && exit 0 || echo "$list"

        ;;

    show )

		doc_name+=" show"
		doc_description="Show a note"
		declare -a doc_options=(
			"<:id>"		"Print a note by given ID"
		) && [[ "$1" == '--inspect' ]] && return 0


		id="$1" && shift
		if [[ "$1" == "--title" ]]; then
			nb list "$1" --no-color --no-indicator | awk '{print substr($0, index($0,$2))}'
		else
			nb show "$id" --print
		fi

		;;

    create )

		doc_name+=" create"
		doc_description="Create a new note"
		declare -a doc_options=(
			"-T"	"Title of the note"
			"-C"	"Content of the note"
			"-t"	"Comma-separated tags for the note (my-tag,tag2,another-tag)"
			"-E"	"Encrypt the note"
			"-P"	"Password for the note"
			"-N"	"Notebook to save the note in (defaults to 'home')"
			"-F"	"Folder to save the note in"
			"-f"	"Filename for the note"
		) && [[ "$1" == '--inspect' ]] && return 0

        notebook="home"
		title="$1"
        declare -a content=()
        while getopts "T:C:t:EP:N:F:f:" opt; do
            case $opt in
                T ) title=$OPTARG ;;
                C ) content+=("$OPTARG") ;;
                t ) tags=$OPTARG ;;
                E ) encrypt=$OPTARG ;;
                P ) password=$OPTARG ;;
                N ) notebook=$OPTARG ;;
                F ) folder=$OPTARG ;;
                f ) filename=$OPTARG ;;
                \? )
                    echo "Invalid option: -$OPTARG" 1>&2
                    exit 1
                    ;;
                : )
                    echo "Option -$OPTARG requires an argument." 1>&2
                    exit 1
                    ;;
            esac
        done

        # if -E is set, -P must also be set
        [ -n "$encrypt" ] && [ -z "$password" ] && echo "Error: Encryption flag (-E) requires a password (-P)" && exit 1

        declare -a args=("$notebook:add" "--no-color")
        [ -n "$title" ] && args+=("--title" "$title")
		for item in "${content[@]}"; do args+=("--content" "$item"); done
        [ -n "$tags" ] && args+=("--tags" "$tags")
        [ -n "$password" ] && args+=("-e" "--password" "$password")
        [ -n "$folder" ] && args+=("--folder" "$folder")
        [ -n "$filename" ] && args+=("--filename" "$filename")

		[[ -z "${content[0]}" ]] && output=$(echo "" | nb "${args[@]}")
		[[ -n "$content" ]] && output=$(nb "${args[@]}")

		id=$(echo "$output" | awk -F'[][]' '{print $2}') && echo "$id"
        ;;

	open )

		doc_name+=" open"
		doc_description="Open a note in the default editor"
		declare -a doc_options=(
			"<:id>"		"Open a note by given ID"
			"-N"		"Notebook to open the note from"
		) && [[ "$1" == '--inspect' ]] && return 0

		id="$1" && shift
		notebook="home"
		while getopts "N:" opt; do
			case $opt in
				N ) notebook=$OPTARG ;;
				* ) echo "Invalid option: -$OPTARG" 1>&2; exit 1 ;;
			esac
		done

		nb use "$notebook" > /dev/null
		nb edit "$id" --edit

		;;

    edit )

		doc_name+=" edit"
		doc_description="Edit a note"
		declare -a doc_options=(
			"-n"	"ID of the note"
			"-T"	"Title of the note"
			"-C"	"Content of the note"
			"-E"	"Encrypt the note"
			"-P"	"Password for the note"
			"-N"	"Notebook to save the note in (defaults to 'home')"
			"-F"	"Folder to save the note in"
			"-f"	"Filename for the note"
		) && [[ "$1" == '--inspect' ]] && return 0

		id="$1" && shift
        notebook="home"
        declare -a content=()
		append=false
        while getopts "T:C:EP:N:F:f:a" opt; do
            case $opt in
                T ) title=$OPTARG ;;
                C ) content+=("$OPTARG") ;;
                E ) encrypt=$OPTARG ;;
                P ) password=$OPTARG ;;
                N ) notebook=$OPTARG ;;
                F ) folder=$OPTARG ;;
                f ) filename=$OPTARG ;;
				a ) append=true ;;
				* ) echo "Invalid option: -$OPTARG" 1>&2; exit 1 ;;
            esac
        done

		[ -z "$id" ] && echo "Error: Must provide an ID (-n)" && exit 1
		[ -n "$encrypt" ] && [ -z "$password" ] && echo "Error: Encryption flag (-E) requires a password (-P)" && exit 1

		nb use "$notebook" > /dev/null
		declare -a args=("edit" "$id" "--no-color")

		[[ "$append" = false ]] && {
			[[ -z "$title" ]] && title=$(nb show "$id" --print | head -n 1)
			[[ -n "$title" ]] && args+=("--content" "# $title")
		}
		[[ "$append" = false ]] && args+=("--overwrite")
		[ -n "$notebook" ] && args+=("--notebook" "$notebook")
		[ -n "$folder" ] && args+=("--folder" "$folder")
		[ -n "$filename" ] && args+=("--filename" "$filename")
		for item in "${content[@]}"; do args+=("--content" "$item"); done
        [ -n "$password" ] && args+=("-e" "--password" "$password")

		nb "${args[@]}" > /dev/null

		# reset
		nb use home > /dev/null

        ;;

    delete )

		doc='{
			"name": "delete",
			"description": "Delete a note",
			"options" : [
				{
					"name": "-f",
					"description": "Filename of the note"
				}
			]
		}'

		doc_name+=" delete"
		doc_description="Delete a note"
		declare -a doc_options=(
			"-f"		"Filename of the note"
		) && [[ "$1" == '--inspect' ]] && return 0

        file="$1"
        nb delete "$file" --force --no-color > /dev/null
        ;;

    * ) echo "Invalid command: $command" && exit 1 ;;
	
esac