#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

doc="$(cat <<'EOF'

# ffmpeg

Video and audio manipulation with ffmpeg

`video-to-mp3`	| Convert video to mp3
`video.chunk`	| Takes a file as input and separates it into equal chunks
`video.merge`	| Merges given chunks into a single file
`video.size`	| Converts a video to a specified size

> ffmpeg video-to-mp3 -v video.mp4 -o audio.mp3 		| Convert video to mp3
> ffmpeg video.size 240 -v video.mp4 -o video.240.mp4	| Converts a video to a specified size

EOF
)" && inspect "$doc" "$1"
# =============================================================================



[ ! -x "$(command -v ffmpeg)" ] && b/error "ffmpeg not installed" "Please install ffmpeg to use this feature"


# Check if a file exists and is not empty
check_file() {
    [[ -z "$1" ]] && b/error "No input file provided" "Please provide a file to convert"
    [[ ! -f "$1" ]] && b/error "File not found" "Please provide a valid file"
    return 0
}

# Run ffmpeg command
run_ffmpeg() {
    if [ -n "$suppress_process" ]; then
        ffmpeg -i "$1" -vf "$2" -c:a copy "$3" >> /dev/null 2>&1
    else
        ffmpeg -i "$1" -vf "$2" -c:a copy "$3"
    fi
}




command="$1"
shift





case $command in



    # Convert video to mp3
    # ========================================================================
    video-to-mp3) doc="$(cat <<'EOF'

# video-to-mp3

Convert video to mp3

`-v`	| Input file
`(-o)`	| Output file (default: ./tmp/xxxxxxxxxx)
`(-s)`	| Suppress process
`(-S)`	| Suppress output

> ffmpeg video-to-mp3 -v video.mp4 -o audio.mp3 | Convert video to mp3

EOF
		)" && inspect "$doc" "$1"
		# ======================

        output="./tmp/$(openssl rand -hex 8).mp3"

        while getopts "v:o:sS" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                s) suppress_process=true ;;
                S) suppress_output=true ;;
				*) b/error invalid_option "Invalid option: -$OPTARG" ;;
            esac
        done

        check_file "$video"
        if [ -n "$suppress_process" ]; then
            ffmpeg -i "$video" -vn -acodec libmp3lame "$output"
        else
            ffmpeg -i "$video" -vn -acodec libmp3lame "$output"
        fi

		[[ -z "$suppress_output" ]] && echo '{"mp3_file": "'"$output"'"}' | jq -r && exit 0 || exit 0

        ;;



    # ========================================================================
    video.chunk) doc="$(cat <<'EOF'

# video.chunk

Takes a file as input and separates it into equal chunks

`-v`		| Input file
`(-o)`		| Output folder (default: ./tmp/xxxxxxxxxx)
`(-d)`		| Duration of each chunk in seconds (default: 60)

> ffmpeg video.chunk -v video.mp4 -o ./chunks -d 30 | Takes a file as input and separates it into equal chunks

EOF
		)" && inspect "$doc" "$1"
		# ======================

        duration=60
        output="./tmp/$(openssl rand -hex 8)"

        while getopts "v:o:d:" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                d) duration="$OPTARG" ;;
				*) b/error invalid_option "Invalid option: -$OPTARG" ;;
            esac
        done
        
        # check if video file is provided
        [ -z "$video" ] && b/error "No video file provided" "Please provide a file to chunk" && exit 1

        # check if chunk size is provided
        [ -z "$duration" ] && b/error "No chunk duration provided" "Please provide a chunk duration" && exit 1

        # check if video file exists
        [ ! -f "$video" ] && b/error "video file not found" "Please provide a valid file" && exit 1

        # check if chunk duration is a number
        [[ ! "$duration" =~ ^[0-9]+$ ]] && b/error "Invalid chunk duration" "Please provide a valid number" && exit 1

        # get video file duration
        total_duration=$(ffprobe -i "$video" -show_entries format=duration -v quiet -of csv="p=0")

        # check if video duration is more than 60 minutes
        if (( $(echo "$total_duration > 3600" | bc -l) )); then
            b/error "Video duration is too long" "Please provide a video of duration less than or equal to 60 minutes"
            exit 1
        fi

        # create output folder
        mkdir -p "$output"

        # check if video file size is more than 2GB
        file_size=$(stat -f%z "$video")
        if ((file_size > 2000000000)); then
            b/error "Video file size is too large" "Please provide a video of size less than or equal to 2GB"
            exit 1
        fi

        # calculate number of chunks
        chunks=$(echo "($total_duration / $duration) + 1" | bc)
        
        # create chunks
        for ((i=0; i<chunks; i++)); do
            start=$(echo "$i * $duration" | bc)
            # video
			ffmpeg -i "$video" -ss "$start" -t "$duration" -c copy "$output/chunk-$i.mp4" >> /dev/null 2>&1
            # thumbnail
            ffmpeg -i "$output/chunk-$i.mp4" -ss 00:00:01 -vframes 1 "$output/chunk-$i.jpg" >> /dev/null 2>&1
            # audio
            ffmpeg -i "$output/chunk-$i.mp4" -vn -acodec libmp3lame "$output/chunk-$i.mp3" >> /dev/null 2>&1
        done



        ;;



    # ========================================================================
    merge) doc="$(cat <<'EOF'

# merge

Merges given chunks into a single file

`-v`		| Input files
`(-o)`		| Output file

> ffmpeg merge -v "chunk-1.mp4|chunk-2.mp4|chunk-3.mp4" -o video.mp4 | Merges given chunks into a single file

EOF
		)" && inspect "$doc" "$1"
		# ======================

        [ -z "$1" ] && b/error "No input files provided" "Please provide files to merge" && exit 1
        [ -z "$2" ] && b/error "No output file provided" "Please provide a file to merge" && exit 1
        ffmpeg -i "concat:$1" -c copy "$2"
        ;;



    # ========================================================================
	video.size) doc="$(cat <<'EOF'

# video.size

Converts a video to a specified size

`:size`	| The size to convert to (240 | 360 | 720)
`-v`		| Input file
`(-o)`		| Output file (default: ./tmp/xxxxxxxxxx)
`(-s)`		| Suppress process
`(-S)`		| Suppress output

EOF
		)" && inspect "$doc" "$1"
		# ======================

		case "$size" in
			240)
				scale="scale=426:240"
				;;
			360)
				scale="scale=640:360"
				;;
			720)
				scale="scale=1280:720"
				;;
			*)
				b/error invalid_option "Invalid size: $size"
				;;
		esac

		output="./tmp/$(openssl rand -hex 8).mp4"

		while getopts "v:o:sS" opt; do
			case $opt in
				v) video="$OPTARG" ;;
				o) output="$OPTARG" ;;
				s) suppress_process=true ;;
				S) suppress_output=true ;;
				*) b/error invalid_option "Invalid option: -$OPTARG" ;;
			esac
		done

		check_file "$video"
		run_ffmpeg "$video" "$scale" "$output"

		[ -z "$suppress_output" ] && { echo '{"$sizep_file": "$output"}'; exit 0; } >> file || exit 0
		;;



esac

