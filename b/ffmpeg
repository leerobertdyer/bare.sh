#!/bin/bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

[ ! -x $(command -v ffmpeg) ] && b/error "ffmpeg not installed" "Please install ffmpeg to use this feature" && exit 1





# Chunk video
if [ -z "$1" ]; then
    b/usage -t commands -w 12 $0 \
        video.chunk "Takes a file as input and separates it into equal chunks" \
        video.merge "Merges given chunks into a single file" \
        video.360 "Converts a video to 360p" \
        video.720 "Converts a video to 720p"
    exit 0
fi





# Check if a file exists and is not empty
check_file() {
    [ -z "$1" ] && b/error "No input file provided" "Please provide a file to convert" && exit 1
    [ ! -f "$1" ] && b/error "File not found" "Please provide a valid file" && exit 1
}

# Run ffmpeg command
run_ffmpeg() {
    if [ -n "$suppress_process" ]; then
        ffmpeg -i "$1" -vf "$2" -c:a copy "$3" >> /dev/null 2>&1
    else
        ffmpeg -i "$1" -vf "$2" -c:a copy "$3"
    fi
}




command="$1"
shift





case $command in



    # Convert video to mp3
    # ========================================================================
    video-to-mp3)

        [ -z "$1" ] && b/usage -t options -w 4 $0 \
            -v "* Input file" \
            -o "  Output file (default: ./tmp/xxxxxxxxxx)" \
            -s "  Suppress process" \
            -S "  Suppress output" && exit 0

        output="./tmp/$(openssl rand -hex 8).mp3"

        while getopts "v:o:sS" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                s) suppress_process=true ;;
                S) suppress_output=true ;;
            esac
        done

        check_file "$video"
        if [ -n "$suppress_process" ]; then
            ffmpeg -i "$video" -vn -acodec libmp3lame "$output" >> /dev/null 2>&1
        else
            ffmpeg -i "$video" -vn -acodec libmp3lame "$output"
        fi

        [ ! -n "$suppress_output" ] && echo '{"mp3_file": "'$output'"}' | jq -r && exit 0 || exit 0

        ;;



    # ========================================================================
    video.chunk)

        b/usage -t options -w 4 $0 \
            -v "* Input file" \
            -o "  Output folder (default: ./tmp/xxxxxxxxxx)" \
            -d "  Chunk duration in seconds (default: 60)"

        duration=60
        output="./tmp/$(openssl rand -hex 8)"

        while getopts "v:o:d:" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                d) duration="$OPTARG" ;;
            esac
        done
        
        # check if video file is provided
        [ -z "$video" ] && b/error "No video file provided" "Please provide a file to chunk" && exit 1

        # check if chunk size is provided
        [ -z "$duration" ] && b/error "No chunk duration provided" "Please provide a chunk duration" && exit 1

        # check if video file exists
        [ ! -f "$video" ] && b/error "video file not found" "Please provide a valid file" && exit 1

        # check if chunk duration is a number
        [[ ! "$duration" =~ ^[0-9]+$ ]] && b/error "Invalid chunk duration" "Please provide a valid number" && exit 1

        # get video file duration
        total_duration=$(ffprobe -i "$video" -show_entries format=duration -v quiet -of csv="p=0")

        # check if video duration is more than 60 minutes
        if (( $(echo "$total_duration > 3600" | bc -l) )); then
            b/error "Video duration is too long" "Please provide a video of duration less than or equal to 60 minutes"
            exit 1
        fi

        # create output folder
        mkdir -p "$output"

        # check if video file size is more than 2GB
        file_size=$(stat -f%z "$video")
        if ((file_size > 2000000000)); then
            b/error "Video file size is too large" "Please provide a video of size less than or equal to 2GB"
            exit 1
        fi

        # calculate number of chunks
        chunks=$(echo "($total_duration / $duration) + 1" | bc)
        
        # create chunks
        for ((i=0; i<$chunks; i++)); do
            start=$(echo "$i * $duration" | bc)
            # video
            ffmpeg -i "$video" -ss $start -t $duration -c copy "$output/chunk-$i.mp4" >> /dev/null 2>&1
            # thumbnail
            ffmpeg -i "$output/chunk-$i.mp4" -ss 00:00:01 -vframes 1 "$output/chunk-$i.jpg" >> /dev/null 2>&1
            # audio
            ffmpeg -i "$output/chunk-$i.mp4" -vn -acodec libmp3lame "$output/chunk-$i.mp3" >> /dev/null 2>&1
        done



        ;;



    # ========================================================================
    merge)
        [ -z "$1" ] && b/error "No input files provided" "Please provide files to merge" && exit 1
        [ -z "$2" ] && b/error "No output file provided" "Please provide a file to merge" && exit 1
        ffmpeg -i "concat:$1" -c copy "$2"
        ;;



    # ========================================================================
    video.240)

        [ -z "$1" ] && b/usage -t options -w 4 $0 \
            -v "* Input file" \
            -o "  Output file (default: ./tmp/xxxxxxxxxx)" \
            -s "  Suppress process" \
            -S "  Suppress output" && exit 0

        output="./tmp/$(openssl rand -hex 8).mp4"

        while getopts "v:o:" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                s) suppress_process=true ;;
                S) suppress_output=true ;;
            esac
        done

        check_file "$video"
        run_ffmpeg "$video" "scale=426:240" "$output"

        [ ! -n "$suppress_output" ] && echo '{"240p_file": "'$output'"}' && exit 0 || exit 0
        ;;



    # ========================================================================
    video.360)

        [ -z "$1" ] && b/usage -t options -w 4 $0 \
            -v "* Input file" \
            -o "  Output file (default: ./tmp/xxxxxxxxxx)" \
            -s "  Suppress process" \
            -S "  Suppress output" && exit 0

        output="./tmp/$(openssl rand -hex 8).mp4"

        while getopts "v:o:" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                s) suppress_process=true ;;
                S) suppress_output=true ;;
            esac
        done

        check_file "$video"
        run_ffmpeg "$video" "scale=640:360" "$output"

        [ ! -n "$suppress_output" ] && echo '{"360p_file": "'$output'"}' && exit 0 || exit 0

        ;;



    # ========================================================================
    video.720)

        [ -z "$1" ] && b/usage -t options -w 4 $0 \
            -v "* Input file" \
            -o "  Output file (default: ./tmp/xxxxxxxxxx)" \
            -s "  Suppress process" \
            -S "  Suppress output" && exit 0

        output="./tmp/$(openssl rand -hex 8).mp4"

        while getopts "v:o:" opt; do
            case $opt in
                v) video="$OPTARG" ;;
                o) output="$OPTARG" ;;
                s) suppress_process=true ;;
                S) suppress_output=true ;;
            esac
        done

        check_file "$video"
        run_ffmpeg "$video" "scale=1280:720" "$output"

        [ ! -n "$suppress_output" ] && echo '{"720p_file": "'$output'"}' && exit 0 || exit 0

        ;;



    # ========================================================================
    *)
        b/error "Invalid command" "Please provide a valid command" && exit 1
        ;;



esac

