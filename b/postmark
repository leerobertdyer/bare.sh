#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

doc="$(cat <<'EOF'

# postmark

Send and receive email with Postmark

`send`		| Send email

> postmark send -t "info@example.com" -s "Hello, world!" -b "<h1>Hello there!</h1>" -f "me@mydomain.com" | Send an email with HTML body

EOF
)" && inspect "$doc" "$1"
# =============================================================================



[ ! -x "$(command -v curl)" ] && echo "ðŸš¨ curl is not installed" && exit 1
[ ! -x "$(command -v jq)" ] && echo "ðŸš¨ jq is not installed" && exit 1
[ -z "$BARE_POSTMARK_SERVER_TOKEN" ] && echo "ðŸš¨ BARE_POSTMARK_SERVER_TOKEN environment variable is not set" && exit 1


command="$1" && shift

curlPostmarkRequest() {
    url="$1"
    payload="$2"

    response=$(curl "$url" --silent -H "Content-Type: application/json" -H "Accept: application/json" -H "X-Postmark-Server-Token: $BARE_POSTMARK_SERVER_TOKEN" -d "$payload" | jq -r)
    echo "$response"
}

to=""
subject=""
htmlBody=""
from=""
replyTo=""
textBody=""
jsonFile=""
jsonString=""

case $command in

    # ========================================================
    send ) doc="$(cat <<'EOF'

# postmark send

Send email

`-t`		| Recipient email address
`-s`		| Email subject
`-b`		| HTML body
`-f`		| From email address
`-r`		| Reply-to email address
`-x`		| Text body
`-j`		| JSON string
`-f`		| JSON file

> postmark send -t "info@example.com" -s "Hello, world!" -b "<h1>Hello there!</h1>" -f "me@mydomain.com" | Send an email with HTML body

EOF
		)" && inspect "$doc" "$1"
		# ======================

        while getopts ":t:s:b:f:r:x:j:f:" opt; do
            case $opt in
                t ) to="$OPTARG" ;;
                s ) subject="$OPTARG" ;;
                b ) htmlBody="$OPTARG" ;;
                f ) from="$OPTARG" ;;
                r ) replyTo="$OPTARG" ;;
                x ) textBody="$OPTARG" ;;
                j ) jsonString="$OPTARG" ;;
                i ) jsonFile="$OPTARG" ;;
                \? ) echo "ðŸŒ¿ Invalid option: -$OPTARG" && exit 1 ;;
                : ) echo "ðŸŒ¿ Option -$OPTARG requires an argument" && exit 1 ;;
            esac
        done
        shift $((OPTIND -1))

        function validateAndSanitizeJson() {
            local inputJson=$1
            echo "$inputJson" | jq '
                if .To and .To | test("^[^@]+@[^@]+$") and
                   .Subject and .Subject | test(".*") and
                   .HtmlBody and .HtmlBody | test(".*") and
                   .From and .From | test("^[^@]+@[^@]+$") and
                   .ReplyTo and .ReplyTo | test("^[^@]+@[^@]+$") and
                   .TextBody and .TextBody | test(".*")
                then . 
                else empty 
                end
                | {To, Subject, HtmlBody, From, ReplyTo, TextBody}'
        }

        if [ -n "$jsonFile" ]; then
            inputJson=$(< "$jsonFile")
        elif [ -n "$jsonString" ]; then
            inputJson="$jsonString"
        else
            inputJson=$(jq -n --arg to "$to" --arg subject "$subject" --arg htmlBody "$htmlBody" --arg from "$from" --arg replyTo "$replyTo" --arg textBody "$textBody" '{
                "To": $to,
                "Subject": $subject,
                "HtmlBody": $htmlBody,
                "From": $from,
                "ReplyTo": $replyTo,
                "TextBody": $textBody
            }')
        fi

        # Validate and sanitize the JSON
        payload=$(validateAndSanitizeJson "$inputJson")

        if [ -z "$payload" ]; then
            echo "JSON validation or sanitization failed"
            exit 1
        fi

        curlPostmarkRequest "https://api.postmarkapp.com/email" "$payload" | jq
        ;;

esac