#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"

doc="$(cat <<'EOF'

# stripe

Interact with the Stripe API

`checkouts.create`		| Create a new checkout session
`checkout.get`			| Get a checkout session
`customers.list`		| List all customers
`customers.create`		| Create a new customer

> stripe checkouts.create -a 100 -c usd -u customer_123 -s https://example.com/success -l 100|usd|Item | Create a new checkout session
> stripe checkout.get -i cs_test_123 | Get a checkout session
> stripe customers.list | List all customers

EOF
)" && inspect "$doc" "$1"
# =============================================================================



[[ -z "$BARE_STRIPE_SECRET_KEY" ]] && b/error "env_error" "Please set the BARE_STRIPE_SECRET_KEY variable in your .env file"

command="$1"
shift

case $command in

    checkouts.create) doc="$(cat <<'EOF'

# stripe checkouts.create

Create a new checkout session

`-a`		| The amount to charge
`-c`		| The currency to charge
`-u`		| The customer to charge
`-s`		| The success URL
`-l`		| A line item to charge

> stripe checkouts.create -a 100 -c usd -u customer_123 -s https://example.com/success -l "100,usd,Item" | Create a new checkout session

EOF
		)" && inspect "$doc" "$1"
		# ======================

		amount=""
		currency=""
		customer=""
		success_url=""
		cancel_url=""
		line_items=()
		while getopts "a:c:u:s:l:" opt; do
			case $opt in
				a) amount="$OPTARG";;
				c) currency="$OPTARG";;
				u) customer="$OPTARG";;
				s) success_url="$OPTARG";;
				l) line_items+=("$OPTARG");;
				\?) echo "Invalid option: -$OPTARG" && exit 1;;
			esac
		done

		for line_item in "${line_items[@]}"; do
			IFS=',' read -r -a parts <<< "$line_item"
			amount="${parts[0]}"
			currency="${parts[1]}"
			description="${parts[2]}"

			curl -s -X POST https://api.stripe.com/v1/checkout/sessions \
				-u "$BARE_STRIPE_SECRET_KEY": \
				-d "payment_method_types[]=card" \
				-d "line_items[][amount]=$amount" \
				-d "line_items[][currency]=$currency" \
				-d "line_items[][quantity]=1" \
				-d "line_items[][description]=$description" \
				-d "success_url=$success_url" \
				-d "cancel_url=$cancel_url" \
				-d "customer=$customer" | jq
		done
		;;



    checkout.get) doc="$(cat <<'EOF'

# stripe checkout.get

Get a checkout session

`-i`		| The ID of the checkout session

> stripe checkout.get -i cs_test_123 | Get a checkout session

EOF

		)" && inspect "$doc" "$1"
		# ======================

		id=""
		while getopts "i:" opt; do
			case $opt in
				i) id="$OPTARG";;
				\?) echo "Invalid option: -$OPTARG" && exit 1;;
			esac
		done
		[[ -z "$id" ]] && echo "No ID specified" && exit 1
		curl -s -X GET "https://api.stripe.com/v1/checkout/sessions/$id" -u "$BARE_STRIPE_SECRET_KEY": | jq
		;;



	customers.list) doc="$(cat <<'EOF'

# stripe customers.list

List all customers

`-l`	| Limit the number of customers returned

> stripe customers.list			| List all customers
> stripe customers.list -l 5	| List the first 5 customers

EOF
		)" && inspect "$doc" "$1"
		# ======================

        curl -s -X GET https://api.stripe.com/v1/customers -u "$BARE_STRIPE_SECRET_KEY": | jq
        ;;
    
	customers.create) doc="$(cat <<'EOF'

# stripe customers.create

Create a new customer

`-e`		| The email of the customer

> stripe customers.create -e "customer@theirdomain.com" | Create a new customer

EOF
		)" && inspect "$doc" "$1"
		# ======================

		email=""
		while getopts "e:" opt; do
			case $opt in
				e) email="$OPTARG";;
				\?) echo "Invalid option: -$OPTARG" && exit 1;;
			esac
		done
		[[ -z "$email" ]] && echo "No email specified" && exit 1
		curl -s -X POST https://api.stripe.com/v1/customers \
			-u "$BARE_STRIPE_SECRET_KEY": \
			-d "email=$email" | jq
		;;
    
esac