#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../lib/init"



# Requirements
[ -z "$BARE_OPENAI_API_KEY" ] && b/error env_error "BARE_OPENAI_API_KEY environment variable is not set"


# Function to make a request to the OpenAI API
curlRequest() {
	local OPTIND opt url file purpose data

	curl_opts=(-H "Authorization: Bearer $BARE_OPENAI_API_KEY" -H "OpenAI-Beta: assistants=v1" --silent)

	while getopts "u:f:p:d:j" opt; do
		case $opt in
			u ) url="$OPTARG" ;;
			f ) file="$OPTARG" ;;
			p ) purpose="$OPTARG" ;;
			d ) data="$OPTARG" ;;
			j ) json=true ;;
			\? ) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
		esac
	done

	[[ -n "$file" ]] && curl_opts+=(-F "file=@$file")
	[[ -n "$purpose" ]] && curl_opts+=(-F "purpose=$purpose")
	[[ -n "$data" ]] && curl_opts+=(-d "$data")
	[[ -n "$json" ]] && curl_opts+=(-H "Content-Type: application/json") || curl_opts+=(-H "Content-Type: multipart/form-data")
	
	response=$(curl "$url" "${curl_opts[@]}")

	echo "$response" | jq -r '.'
}


# Set default values
api_url="https://api.openai.com/v1"
default_model="gpt-3.5-turbo-0125"
command="$1" && shift

# Parse command line options
case "$command" in



	# ========================================================
	chat )

		format="text"
		message="$1"
		assistant_prompt="${2:-You are a helpful AI assistant.}"
		model="$default_model"
		while getopts ":m:a:o:jsS:V" opt; do
			case ${opt} in
				m ) message="$OPTARG" ;;
				a ) assistant_prompt="$OPTARG" ;;
				o ) model="$OPTARG" ;;
				j ) format="json_object" ;;
				s ) consider_scripts=true ;;
				S ) consider_script="$OPTARG" ;;
				V ) verbose=true ;;
				* ) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
			esac
		done

		# check if assistant_prompt is one word and begins with "asst_"
		if [[ $assistant_prompt =~ ^asst_ ]]; then
			assistant_prompt=$(sqlite3 "$BARE_HOME/db" "SELECT instructions FROM assistants WHERE id='$assistant_prompt'")
		fi

		[[ -n "$consider_script" ]] && context="$(./bare interpret "$consider_script")" && assistant_prompt="$assistant_prompt -- and consider this as context: $context"

		response=$(curlRequest -u "$api_url/chat/completions" -d "$(jq -n --arg assistant_prompt "${assistant_prompt}" --arg model "${model}" --arg content "$message" --arg format "${format}" '{
			model: $model,
			response_format: { "type": $format },
			messages: [
				{ role: "system", content: $assistant_prompt },
				{ role: "user", content: $content }
			]
		}')" -j)
		content=$(echo "$response" | jq -r '.choices[0].message.content')

		[[ $verbose ]] && echo "$response" | jq || echo "$content"
		;;



    # ========================================================
    assistants.create )

        tools=()
        model=$default_model

        while getopts "n:i:t:oJV" opt; do
            case ${opt} in
                n ) assistant_name="$OPTARG" ;;
                i ) instructions="$OPTARG" ;;
                t ) IFS='|' read -ra tools <<< "$OPTARG" ;;
                o ) model="$OPTARG" ;;
                J ) respond="as_json" ;;
                V ) verbose=true ;;
                \? ) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
            esac
        done

        if [[ -z "${tools[*]}" ]]; then
            tools=("code_interpreter" "retrieval")
        fi

        payload=$(jq -n --arg name "$assistant_name" --arg instructions "$instructions" --arg model "$model" --argjson tools "$(printf '%s\n' "${tools[@]}" | jq -R . | jq -s 'map({type: .})')" '{
            instructions: $instructions,
            name: $name,
            model: $model,
            tools: $tools
        }')

        response=$(curlRequest -u "$api_url/assistants" -d "$payload" -j)
		assistant_id="$(echo "$response" | jq -r '.id')"

		IFS="," && tools_string="${tools[*]}" && unset IFS
		sqlite3 "$BARE_HOME/db" "INSERT INTO assistants (id, title, model, tools, instructions) VALUES ('$assistant_id', '$assistant_name', '$model', '$tools_string', '$instructions')"

        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$respond" == "as_json" ]]; then
            echo "$response" | jq -r '{assistant_id: .id, tools: [.tools[] | .type]}'
        else
            echo "$assistant_id"
        fi

        ;;



    # ========================================================
    threads.create )

        file_ids=""

		title="$(date +%Y%m%d-%H%M%S)"
		user="user"
        while getopts ":T:m:f:UJV" opt; do
            case ${opt} in
				T ) title="$OPTARG" ;;
                m ) initial_message="$OPTARG" ;;
                f ) file_ids="$OPTARG" ;;
				U ) user="$OPTARG" ;;
                J ) respond="as_json" ;;
                V ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

		[[ -z "$initial_message" ]] && b/error "initial_message is required"

        # Convert the comma-separated list of file IDs into a JSON array
        file_ids_json=$(jq -nR '[inputs | split(",") | .[]]' <<< "$file_ids")

        payload=$(jq -n --arg initial_message "$initial_message" --argjson file_ids "$file_ids_json" '{
            messages: [ { role: "user", content: $initial_message, file_ids: $file_ids } ]
        }')

        response=$(curlRequest -u "$api_url/threads" -d "$payload" -j)

		thread_id="$(echo "$response" | jq -r '.id')"

        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$respond" == "as_json" ]]; then
            echo "$response" | jq -r '{thread_id: .id}'
        else
            echo "$thread_id"
        fi

        ;;



    # ========================================================
    thread.messages.append )

		file_ids="[]"
		user="user"
		while getopts ":t:m:f:U:JV" opt; do
			case ${opt} in
				t ) thread_id="$OPTARG" ;;
				m ) message="$OPTARG" ;;
				f ) file_ids="$OPTARG" ;;
				U ) user="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		payload=$(jq -n --arg role "user" --arg content "$message" --argjson file_ids "$file_ids" '{
			role: $role,
			content: $content,
			file_ids: $file_ids
		}')

		response=$(curlRequest -u "$api_url/threads/$thread_id/messages" -d "$payload" -j)

		if [[ "$verbose" == true ]]; then
			echo "$response" | jq -r
		elif [[ "$respond" == "as_json" ]]; then
			echo "$response" | jq -r '{thread_id: .thread_id, message_id: .id}'
		fi

		exit 0

		;;



    # ========================================================
    thread.messages.list )

        limit=5
        
        while getopts ":t:l:JV" opt; do
            case ${opt} in
                t ) thread_id="$OPTARG" ;;
                l ) limit="${OPTARG:-5}" ;;
                J ) respond="as_json" ;;
                V ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" ;;
            esac
        done

        [[ ! $limit =~ ^[0-9]+$ ]] && printf "ðŸš¨ 2:limit must be an integer\n" && exit 1

        response=$(curlRequest -u "$api_url/threads/$thread_id/messages?limit=$limit")

        # [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .data[0].thread_id, messages: [.data[] | {role: .role, value: .content[0].text.value, created_at: .created_at}]}'
        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$respond" == "as_json" ]]; then
            echo "$response" | jq -r '{thread_id: .data[0].thread_id, messages: [.data[] | {role: .role, value: .content[0].text.value, created_at: .created_at}]}'
        else
            echo "$response" | jq -r '.data[] | "\(.role): \(.content[0].text.value) | "' | sed 's/ | $//'
        fi

        ;;



    # ========================================================
    thread.run)

		while getopts ":t:a:JV" opt; do
			case ${opt} in
				t ) thread_id="$OPTARG" ;;
				a ) assistant_id="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		payload=$(jq -n --arg assistant_id "$assistant_id" '{
			assistant_id: $assistant_id
		}')

		response=$(curlRequest -u "$api_url/threads/$thread_id/runs" -d "$payload" -j)

		# [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .thread_id, run_id: .id, status: .status}'
		if [[ "$verbose" == true ]]; then
			echo "$response" | jq -r
		elif [[ "$respond" == "as_json" ]]; then
			echo "$response" | jq -r '{thread_id: .thread_id, run_id: .id, status: .status}'
		else
			echo "$response" | jq -r '.id'
		fi
		;;



    # ========================================================
    thread.run.poll )

        while getopts ":t:r:JV" opt; do
            case ${opt} in
                t ) thread_id="$OPTARG" ;;
                r ) run_id="$OPTARG" ;;
                J ) respond="as_json" ;;
                V ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        response=$(curlRequest -u "$api_url/threads/$thread_id/runs/$run_id")

        # [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .thread_id, run_id: .id, status: .status}'
        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$respond" == "as_json" ]]; then
            echo "$response" | jq -r '{thread_id: .thread_id, run_id: .id, status: .status}'
        else
            echo "$response" | jq -r '.status'
        fi
        ;;



    # ========================================================
    files.upload )

        purpose="assistants"
        while getopts ":f:p:JV" opt; do
            case ${opt} in
                f ) file="$OPTARG" ;;
                p ) purpose="$OPTARG" ;;
                J ) respond="as_json" ;;
                V ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        response=$(curlRequest -u "$api_url/files" -f "$file" -p "$purpose")

        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$respond" == "as_json" ]]; then
            echo "$response" | jq -r '{file_id: .id}'
        else
            echo "$response" | jq -r .id
        fi
        ;;


    # ========================================================
    files.list )

		purpose="assistants"
		while getopts ":p:JV" opt; do
			case ${opt} in
				p ) purpose="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		url="$api_url/files?purpose=$purpose"

		response=$(curlRequest -u "$url")

		if [[ "$verbose" == true ]]; then
			echo "$response" | jq -r
		elif [[ "$respond" == "as_json" ]]; then
			echo "$response" | jq -r '[.data[] | {id: .id, purpose: .purpose, created_at: .created_at}]'
		else
			echo "$response" | jq -r '.data[] | .id'
		fi
		;;


    # ========================================================
    file.show )
    
		while getopts ":f:JV" opt; do
			case ${opt} in
				f ) file_id="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		response=$(curlRequest -u "$api_url/files/$file_id")

		# [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{file_id: .id, status: .status, created_at: .created_at}'
		if [[ "$verbose" == true ]]; then
			echo "$response" | jq -r
		elif [[ "$respond" == "as_json" ]]; then
			echo "$response" | jq -r '{file_id: .id, status: .status, created_at: .created_at}'
		else
			echo "$response" | jq -r '.status'
		fi
		;;


    # ========================================================
    file.delete )
    
		while getopts ":f:JV" opt; do
			case ${opt} in
				f ) file_id="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		response=$(curl -X DELETE -H "Authorization: Bearer $BARE_OPENAI_API_KEY" --silent "$api_url/files/$file_id")

		if [[ "$verbose" == true ]]; then
			echo "$response" | jq -r
		elif [[ "$respond" == "as_json" ]]; then
			echo "$response" | jq -r '{file_id: .id, deleted: .deleted}'
		else
			exit 0
		fi
		;;


    # ========================================================
    images.create )
    
		model="dall-e-3"
		n=1
		quality="standard"
		response_format="url"
		size="1024x1024"
		style="vivid"

		while getopts ":p:m:n:q:r:s:t:u:JV" opt; do
			case ${opt} in
				p ) prompt="$OPTARG" ;;
				m ) model="$OPTARG" ;;
				n ) n="$OPTARG" ;;
				q ) quality="$OPTARG" ;;
				r ) response_format="$OPTARG" ;;
				s ) size="$OPTARG" ;;
				t ) style="$OPTARG" ;;
				u ) user="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		payload=$(jq -n --arg model "$model" --arg prompt "$prompt" --argjson n "$n" --arg quality "$quality" --arg response_format "$response_format" --arg size "$size" --arg style "$style" --arg user "$user" '{
			model: $model,
			prompt: $prompt,
			n: $n,
			quality: $quality,
			response_format: $response_format,
			size: $size,
			style: $style,
			user: $user
		}')

		response=$(curlRequest -u "$api_url/images/generations" -d "$payload" -j)

		# [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{images: [.data[].url]}'

		if [[ "$verbose" == true ]]; then
			echo "$response" | jq -r
		elif [[ "$respond" == "as_json" ]]; then
			echo "$response" | jq -r '{images: [.data[].url]}'
		else
			echo "$response" | jq -r '.data[].url'
		fi
		;;

        
    # ========================================================
    audio.create )
    
		model="tts-1"
		voice="alloy"
		response_format="mp3"
		speed=1.0

		while getopts ":i:m:v:r:s:u:JV" opt; do
			case ${opt} in
				i ) input="$OPTARG" ;;
				m ) model="$OPTARG" ;;
				v ) voice="$OPTARG" ;;
				r ) response_format="$OPTARG" ;;
				s ) speed="$OPTARG" ;;
				u ) user="$OPTARG" ;;
				J ) respond="as_json" ;;
				V ) verbose=true ;;
				\? ) b/error invalid_option "$OPTARG" && exit 1 ;;
			esac
		done

		payload=$(jq -n --arg model "$model" --arg input "$input" --arg voice "$voice" --arg response_format "$response_format" --arg speed "$speed" --arg user "$user" '{
			model: $model,
			input: $input,
			voice: $voice,
			response_format: $response_format,
			speed: $speed,
			user: $user
		}')

		random_file_name=$(openssl rand -hex 16)

		curl https://api.openai.com/v1/audio/speech \
			-H "Authorization: Bearer $BARE_OPENAI_API_KEY" \
			-H "Content-Type: application/json" \
			-d "$payload" \
			--silent \
			--output ./tmp/$random_file_name.mp3

		if [[ "$verbose" == true ]]; then
			echo "{ \"file_path\": \"./$random_file_name.mp3\" }"
		elif [[ "$respond" == "as_json" ]]; then
			echo "{ \"file_path\": \"./$random_file_name.mp3\" }"
		else
			echo "./tmp/$random_file_name.mp3"
		fi
		;;


    # ========================================================
    audio.transcribe )

        language="en"
        output_file="$BARE_DIR/tmp/transcription-$(date +%Y%m%d-%H%M%S).txt"
        response_format="json"
        temperature=0
        timestamp_granularities="segment"
        model="whisper-1"

        while getopts ":f:o:m:l:p:r:t:g:JV" opt; do
            case ${opt} in
                f ) file="$BARE_DIR/$OPTARG" ;;
                o ) output_file="$OPTARG" ;;
                m ) model="$OPTARG" ;;
                l ) language="$OPTARG" ;;
                p ) prompt="$OPTARG" ;;
                r ) response_format="$OPTARG" ;;
                t ) temperature="$OPTARG" ;;
                g ) timestamp_granularities="$OPTARG" ;;
                J ) respond="as_json" ;;
                V ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        # Define constants
        MAX_SIZE=5000000

        # Get file size
        file_size=$(wc -c <"$file")

        # If file size is greater than max size, split the file
        if (( file_size > MAX_SIZE )); then

            # First, check if ffmpeg is installed (we need it to split the file)
            [ ! -x "$(command -v ffmpeg)" ] && b/error "ffmpeg is not installed" "Please install ffmpeg to use this feature" && exit 1

            # Second, we don't weant to clog up the console with a huge response, so we need to specify an output file
            if [[ -z "$output_file" ]]; then
                echo "Error: File size exceeds limit for non-verbose mode. Please specify an output file."
                exit 1
            fi

            random_dir_name=$(openssl rand -hex 16)
            tmp_dir=$(mkdir -p ./tmp/"$random_dir_name" && echo ./tmp/"$random_dir_name")

            # Split the file into chunks and put them in the random directory
            ffmpeg -i "$file" -f segment -segment_time 300 -c copy -map 0 -segment_format mp3 -segment_list "$tmp_dir/files.txt" "$tmp_dir/chunk%03d.mp3" > /dev/null 2>&1

            # Initialize response array
            response_array="["

            # Process each chunk
            while IFS= read -r chunk; do
                chunk_path="$tmp_dir/$chunk"
                # Send request to API
                response=$(curl -X POST -H "Authorization: Bearer $BARE_OPENAI_API_KEY" -H "Content-Type: multipart/form-data" -F "file=@$chunk_path" -F "model=$model" -F "language=$language" -F "prompt=$prompt" -F "response_format=$response_format" -F "temperature=$temperature" -F "timestamp_granularities[]=$timestamp_granularities" -F "model=$model" --silent --max-time 60 https://api.openai.com/v1/audio/transcriptions)

                # Check if response is a valid JSON and contains 'text' field
                if echo "$response" | jq -e . >/dev/null 2>&1 && echo "$response" | jq 'has("text")' | grep -q true; then
                    # If verbose mode, store entire response, else extract text
                    if [[ "$verbose" = true ]]; then
                        # Limit the length of the 'segments.text' property to 140 characters
                        response=$(echo "$response" | jq '.segments[].text = (.segments[].text | .[0:140] + "...")')
                        response_array+="$response,"
                    else
                        echo "$response" | jq -r '.text' >> "$output_file"
                    fi
                else
                    echo "Error: Invalid response from API"
                    exit 1
                fi

                # Delete chunk
                rm "$chunk_path"
            done < "$tmp_dir/files.txt"

            # remove the tmp directory
            rm -r "$tmp_dir"

            # If verbose mode, print the response array
            if [[ "$verbose" = true ]]; then
                # Remove trailing comma and close array
                response_array=${response_array%?}
                response_array+="]"
                echo "$response_array"
            else
                jq -n --arg file "$output_file" '{file: $file}'
            fi
        else
            # Send the request to the API
            # Send the request to the API
            response=$(curl -X POST -H "Authorization: Bearer $BARE_OPENAI_API_KEY" -H "Content-Type: multipart/form-data" -F "file=@$file" -F "model=$model" -F "language=$language" -F "prompt=$prompt" -F "response_format=$response_format" -F "temperature=$temperature" -F "timestamp_granularities[]=$timestamp_granularities" --silent --max-time 60 https://api.openai.com/v1/audio/transcriptions)

            # Check if the response is valid JSON and contains 'text' field
            if echo "$response" | jq -e . >/dev/null 2>&1 && echo "$response" | jq 'has("text")' | grep -q true; then
                # If verbose mode, store entire response, else extract text
                if [[ "$verbose" = true ]]; then
                    echo "$response" | jq -r >> "$output_file"
                else
                    echo "$response" | jq -r '.text' >> "$output_file"
                fi
            else
                echo "Error: Invalid response from API"
                echo "Response: $response"
                exit 1
            fi
        fi

        # Get the relative path of the output file
        # [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "{ \"file\": \"$(basename "$output_file")\" }"
        
        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$respond" == "as_json" ]]; then
            jq -n --arg file "$output_file" '{file: $file}'
        else
            jq -rn --arg file "$output_file" '$file'
        fi


esac