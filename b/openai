#!/bin/bash
source lib/init




# Use color variables in output
[ ! -x "$(command -v curl)" ] && b/error "curl is not installed" && exit 1
[ ! -x "$(command -v jq)" ] && b/error "jq is not installed" && exit 1
[ -z "$OPENAI_API_KEY" ] && b/error "OPENAI_API_KEY environment variable is not set" && exit 1





# Display usage if no arguments are provided
if [ -z "$1" ]; then
    b/usage -t commands -w 24 $0 \
        chat "Send a message to an AI model" \
        assistants.create "Create a new assistant" \
        threads.create "Create a new thread" \
        thread.messages.append "Append a message to a thread" \
        thread.messages.list "List messages in a thread" \
        thread.run "Run an assistant on a thread" \
        thread.run.poll "Poll the status of a thread run" \
        files.upload "Upload a file to the OpenAI API" \
        files.list "List files uploaded to the OpenAI API" \
        file.delete "Delete a file from the OpenAI API" \
        images.create "Generate images from a prompt" \
        audio.create "Generate audio from a text prompt" \
        audio.transcribe "Transcribe an audio file"
    exit 0
fi





# Function to make a request to the OpenAI API
curlRequest() {
    local OPTIND opt url file purpose data

    curl_opts=(-H "Authorization: Bearer $OPENAI_API_KEY" -H "OpenAI-Beta: assistants=v1" --silent)

    while getopts "u:f:p:d:j" opt; do
        case ${opt} in
            u ) url="$OPTARG" ;;
            f ) file="$OPTARG" ;;
            p ) purpose="$OPTARG" ;;
            d ) data="$OPTARG" ;;
            j ) json=true ;;
            \? ) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
        esac
    done

    [[ -n "$file" ]] && curl_opts+=(-F "file=@$file")
    [[ -n "$purpose" ]] && curl_opts+=(-F "purpose=$purpose")
    [[ -n "$data" ]] && curl_opts+=(-d "$data")
    [[ -n "$json" ]] && curl_opts+=(-H "Content-Type: application/json") || curl_opts+=(-H "Content-Type: multipart/form-data")

    if [ $? -ne 0 ] || ! echo "$response" | jq . > /dev/null 2>&1; then
        echo "Failed to communicate with the API or received an invalid response." >&2; return 1
    fi
    
    response=$(curl "$url" "${curl_opts[@]}")

    echo "$response" | jq -r
}





# Set default values
api_url="https://api.openai.com/v1"
default_model="gpt-3.5-turbo-0125"
command="$1"
shift





# Parse command line options
case $command in



    # ========================================================
    chat )

        [[ -z "$2" ]] && b/usage -w 4 "$0 chat" \
            -m "* The message to send" \
            -a "~ The system prompt (assistant prompt)" \
            -o "  The model to use" \
            -j "  Return the response as a JSON object" \
            -v "  Return the response in verbose mode" && exit 0
        
        format="text"
        raw_json=false

        while getopts ":m:a:o:jv" opt; do
            case ${opt} in
                m ) message="$OPTARG" ;;
                o ) model="$OPTARG" ;;
                a ) assistant_prompt="${OPTARG:-You are a helpful AI assistant.}" ;;
                j ) format="json_object" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "-$OPTARG" && exit 1 ;;
            esac
        done

        message_payload=$(jq -n --arg assistant_prompt "${assistant_prompt}" --arg model "${model:-$default_model}" --arg content "$message" --arg format "${format:-text}" '{
            model: $model,
            response_format: { "type": $format },
            messages: [ { role: "system", content: $assistant_prompt }, { role: "user", content: $content } ]
        }')

        response=$(curlRequest -u "$api_url/chat/completions" -d "$message_payload" -j)

        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        elif [[ "$format" == "json_object" ]]; then
            echo "$response" | jq -r '.choices[0].message.content' | jq
        else
            echo "$response" | jq -r '{response: .choices[0].message.content}'
        fi
        ;;



    # ========================================================
    assistants.create )
        
        [[ -z "$2" ]] && b/usage -w 4 "$0 assistants.create" \
            -n "* The name of the assistant" \
            -i "* Instructions for the assistant" \
            -o "  The model to use" \
            -t "  The tools to enable (pipe separated)" \
            -v "  Return the response in verbose mode" && exit 0

        tools=()
        model=$default_model

        while getopts "n:i:t:ov" opt; do
            case ${opt} in
                n ) assistant_name="$OPTARG" ;;
                i ) instructions="$OPTARG" ;;
                t ) IFS='|' read -ra tools <<< "$OPTARG" ;;
                o ) model="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
            esac
        done

        if [[ -z "${tools[*]}" ]]; then
            tools=("code_interpreter" "retrieval")
        fi

        payload=$(jq -n --arg name "$assistant_name" --arg instructions "$instructions" --arg model "$model" --argjson tools "$(printf '%s\n' "${tools[@]}" | jq -R . | jq -s 'map({type: .})')" '{
            instructions: $instructions,
            name: $name,
            model: $model,
            tools: $tools
        }')

        response=$(curlRequest -u "$api_url/assistants" -d "$payload" -j)

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{assistant_id: .id, tools: [.tools[] | .type]}'
        ;;



    # ========================================================
    threads.create )

        [[ -z "$2" ]] && b/usage -w 4 "$0 threads.create" \
            -m "* The initial message to send" \
            -f "  The file IDs to attach (array)" \
            -v "  Return the response in verbose mode" && exit 0

        file_ids="[]"

        while getopts ":m:f:v" opt; do
            case ${opt} in
                m ) initial_message="$OPTARG" ;;
                f ) file_ids="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        payload=$(jq -n --arg initial_message "$initial_message" --argjson file_ids "$file_ids" '{
            messages: [ { role: "user", content: $initial_message, file_ids: $file_ids } ]
        }')

        response=$(curlRequest -u "$api_url/threads" -d "$payload" -j)

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .id}'
        ;;



    # ========================================================
    thread.messages.append)

        [[ -z "$2" ]] && b/usage -w 4 "$0 thread.messages.append" \
            -t "* The thread ID" \
            -m "* The message to send" \
            -f "  The file IDs to attach (array)" \
            -v "  Return the response in verbose mode" && exit 0

        file_ids="[]"

        while getopts ":t:m:f:v" opt; do
            case ${opt} in
                t ) thread_id="$OPTARG" ;;
                m ) message="$OPTARG" ;;
                f ) file_ids="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        payload=$(jq -n --arg role "user" --arg content "$message" --argjson file_ids "$file_ids" '{
            role: $role,
            content: $content,
            file_ids: $file_ids
        }')

        response=$(curlRequest -u "$api_url/threads/$thread_id/messages" -d "$payload" -j)

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .thread_id, message_id: .id}'
        ;;



    # ========================================================
    thread.messages.list )

        [[ -z "$2" ]] && b/usage -w 4 "$0 thread.messages.list" \
            -t "* The thread ID" \
            -l "  The number of messages to return" \
            -v "  Return the response in verbose mode" && exit 0

        limit=5
        
        while getopts ":t:l:v" opt; do
            case ${opt} in
                t ) thread_id="$OPTARG" ;;
                l ) limit="${OPTARG:-5}" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        [[ ! $limit =~ ^[0-9]+$ ]] && printf "ðŸš¨ 2:limit must be an integer\n" && exit 1

        response=$(curlRequest -u "$api_url/threads/$thread_id/messages?limit=$limit")

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .data[0].thread_id, messages: [.data[] | {role: .role, value: .content[0].text.value, created_at: .created_at}]}'
        ;;



    # ========================================================
    thread.run)

        [[ -z "$2" ]] && b/usage -w 4 "$0 thread.run" \
            -t "* The thread ID" \
            -a "* The assistant ID" \
            -v "  Return the response in verbose mode" && exit 0

        while getopts ":t:a:v" opt; do
            case ${opt} in
                t ) thread_id="$OPTARG" ;;
                a ) assistant_id="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        payload=$(jq -n --arg assistant_id "$assistant_id" '{
            assistant_id: $assistant_id
        }')

        response=$(curlRequest -u "$api_url/threads/$thread_id/runs" -d "$payload" -j)

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .thread_id, run_id: .id, status: .status}'
        ;;



    # ========================================================
    thread.run.poll )

        [[ -z "$2" ]] && b/usage -w 4 "$0 thread.run.poll" \
            -t "* The thread ID" \
            -r "* The run ID" \
            -v "  Return the response in verbose mode" && exit 0

        while getopts ":t:r:v" opt; do
            case ${opt} in
                t ) thread_id="$OPTARG" ;;
                r ) run_id="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        response=$(curlRequest -u "$api_url/threads/$thread_id/runs/$run_id")

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{thread_id: .thread_id, run_id: .id, status: .status}'
        ;;



    # ========================================================
    files.upload )

        [[ -z "$2" ]] && b/usage -w 4 "$0 files.upload" \
            -f "* The file to upload" \
            -p "* The purpose of the file" \
            -v "  Return the response in verbose mode" && exit 0

        while getopts ":f:p:v" opt; do
            case ${opt} in
                f ) file="$OPTARG" ;;
                p ) purpose="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        response=$(curlRequest -u "$api_url/files" -f "$file" -p "$purpose")

        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{file_id: .id}'
        ;;


    # ========================================================
    files.list )

        [[ "$1" == "--help" ]] && b/usage -w 4 "$0 files.list" \
            -p "  Filters the files by given purpose" \
            -v "  Return the response in verbose mode" && exit 0

        purpose="assistants"

        while getopts ":p:v" opt; do
            case ${opt} in
                p ) purpose="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        url="$api_url/files?purpose=$purpose"

        response=$(curlRequest -u "$url")

        if [[ "$verbose" == true ]]; then
            echo "$response" | jq -r
        else
            data=$(echo "$response" | jq -r '.data // empty')
            if [[ -n "$data" ]]; then
                echo "$response" | jq -r '[.data[] | {id: .id, purpose: .purpose, created_at: .created_at}]'
            else
                echo "[]" | jq -r
            fi
        fi
        ;;


    # ========================================================
    file.delete )
    
            [[ -z "$2" ]] && b/usage -w 4 "$0 file.delete" \
                -f "* The file ID to delete" \
                -v "  Return the response in verbose mode" && exit 0
    
            while getopts ":f:v" opt; do
                case ${opt} in
                    f ) file_id="$OPTARG" ;;
                    v ) verbose=true ;;
                    \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
                esac
            done
    
            response=$(curl -X DELETE -H "Authorization: Bearer $OPENAI_API_KEY" --silent "$api_url/files/$file_id")
    
            [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{file_id: .id, deleted: .deleted}'
            ;;


    # ========================================================
    images.create )
    
            [[ -z "$2" ]] && b/usage -w 4 "$0 images.create" \
                -p "* The prompt for the image" \
                -m "  The model to use" \
                -n "  The number of images to generate" \
                -q "  The quality of the image" \
                -r "  The response format" \
                -s "  The size of the image" \
                -t "  The style of the image" \
                -u "  A unique identifier representing your end-user" \
                -v "  Return the response in verbose mode" && exit 0
    
            model="dall-e-3"
            n=1
            quality="standard"
            response_format="url"
            size="1024x1024"
            style="vivid"
    
            while getopts ":p:m:n:q:r:s:t:u:v" opt; do
                case ${opt} in
                    p ) prompt="$OPTARG" ;;
                    m ) model="$OPTARG" ;;
                    n ) n="$OPTARG" ;;
                    q ) quality="$OPTARG" ;;
                    r ) response_format="$OPTARG" ;;
                    s ) size="$OPTARG" ;;
                    t ) style="$OPTARG" ;;
                    u ) user="$OPTARG" ;;
                    v ) verbose=true ;;
                    \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
                esac
            done
    
            payload=$(jq -n --arg model "$model" --arg prompt "$prompt" --argjson n "$n" --arg quality "$quality" --arg response_format "$response_format" --arg size "$size" --arg style "$style" --arg user "$user" '{
                model: $model,
                prompt: $prompt,
                n: $n,
                quality: $quality,
                response_format: $response_format,
                size: $size,
                style: $style,
                user: $user
            }')
    
            response=$(curlRequest -u "$api_url/images/generations" -d "$payload" -j)
    
            [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "$response" | jq -r '{images: [.data[].url]}'
            ;;

        
    # ========================================================
    audio.create )
    
            [[ -z "$2" ]] && b/usage -w 4 "$0 audio.create" \
                -i "* The input text" \
                -m "  The model to use" \
                -v "  The voice to use" \
                -r "  The response format" \
                -s "  The speed of the audio" \
                -u "  A unique identifier representing your end-user" \
                -v "  Return the response in verbose mode" && exit 0
    
            model="tts-1"
            voice="alloy"
            response_format="mp3"
            speed=1.0
    
            while getopts ":i:m:v:r:s:u:v" opt; do
                case ${opt} in
                    i ) input="$OPTARG" ;;
                    m ) model="$OPTARG" ;;
                    v ) voice="$OPTARG" ;;
                    r ) response_format="$OPTARG" ;;
                    s ) speed="$OPTARG" ;;
                    u ) user="$OPTARG" ;;
                    v ) verbose=true ;;
                    \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
                esac
            done
    
            payload=$(jq -n --arg model "$model" --arg input "$input" --arg voice "$voice" --arg response_format "$response_format" --arg speed "$speed" --arg user "$user" '{
                model: $model,
                input: $input,
                voice: $voice,
                response_format: $response_format,
                speed: $speed,
                user: $user
            }')

            random_file_name=$(openssl rand -hex 16)

            curl https://api.openai.com/v1/audio/speech \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -d "$payload" \
                --silent \
                --output ./$random_file_name.mp3
    
            [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "{ \"file_path\": \"./$random_file_name.mp3\" }"
            ;;


    # ========================================================
    audio.transcribe )

        [[ -z "$2" ]] && b/usage -w 4 "$0 audio.transcribe" \
            -f "* The audio file to transcribe" \
            -o "~ The output file name (ie, output.txt) -- helpful for longer transcriptions" \
            -m "  The model to use" \
            -l "  The language of the input audio" \
            -p "  An optional text to guide the model's style or continue a previous audio segment" \
            -r "  The response format" \
            -t "  The sampling temperature" \
            -g "  The timestamp granularities to populate for this transcription" \
            -v "  Return the response in verbose mode" && exit 0

        language="en"
        output_file=""
        response_format="json"
        temperature=0
        timestamp_granularities="segment"
        model="whisper-1"

        while getopts ":f:o:m:l:p:r:t:g:v" opt; do
            case ${opt} in
                f ) file="$OPTARG" ;;
                o ) output_file="$OPTARG" ;;
                m ) model="$OPTARG" ;;
                l ) language="$OPTARG" ;;
                p ) prompt="$OPTARG" ;;
                r ) response_format="$OPTARG" ;;
                t ) temperature="$OPTARG" ;;
                g ) timestamp_granularities="$OPTARG" ;;
                v ) verbose=true ;;
                \? ) b/error invalid_option "$OPTARG" && exit 1 ;;
            esac
        done

        # Define constants
        MAX_SIZE=5000000

        # Get file size
        file_size=$(wc -c <"$file")

        # If file size is greater than max size, split the file
        if (( file_size > MAX_SIZE )); then

            # First, check if ffmpeg is installed (we need it to split the file)
            [ ! -x "$(command -v ffmpeg)" ] && b/error "ffmpeg is not installed" "Please install ffmpeg to use this feature" && exit 1

            # Second, we don't weant to clog up the console with a huge response, so we need to specify an output file
            if [[ -z "$output_file" ]]; then
                echo "Error: File size exceeds limit for non-verbose mode. Please specify an output file."
                exit 1
            fi

            random_dir_name=$(openssl rand -hex 16)
            tmp_dir=$(mkdir -p ./tmp/$random_dir_name && echo ./tmp/$random_dir_name)

            # Split the file into chunks and put them in the random directory
            ffmpeg -i "$file" -f segment -segment_time 300 -c copy -map 0 -segment_format mp3 -segment_list "$tmp_dir/files.txt" "$tmp_dir/chunk%03d.mp3" > /dev/null 2>&1

            # Initialize response array
            response_array="["

            # Process each chunk
            while IFS= read -r chunk; do
                chunk_path="$tmp_dir/$chunk"
                # Send request to API
                response=$(curl -X POST -H "Authorization: Bearer $OPENAI_API_KEY" -H "Content-Type: multipart/form-data" -F "file=@$chunk_path" -F "model=$model" -F "language=$language" -F "prompt=$prompt" -F "response_format=$response_format" -F "temperature=$temperature" -F "timestamp_granularities[]=$timestamp_granularities" -F "model=$model" --silent --max-time 60 https://api.openai.com/v1/audio/transcriptions)

                # Check if response is a valid JSON and contains 'text' field
                if echo "$response" | jq -e . >/dev/null 2>&1 && echo "$response" | jq 'has("text")' | grep -q true; then
                    # If verbose mode, store entire response, else extract text
                    if [[ "$verbose" = true ]]; then
                        # Limit the length of the 'segments.text' property to 140 characters
                        response=$(echo "$response" | jq '.segments[].text = (.segments[].text | .[0:140] + "...")')
                        response_array+="$response,"
                    else
                        echo "$(echo "$response" | jq -r '.text')" >> "$output_file"
                    fi
                else
                    echo "Error: Invalid response from API"
                    exit 1
                fi

                # Delete chunk
                rm "$chunk_path"
            done < "$tmp_dir/files.txt"

            # remove the tmp directory
            rm -r $tmp_dir

            # If verbose mode, print the response array
            if [[ "$verbose" = true ]]; then
                # Remove trailing comma and close array
                response_array=${response_array%?}
                response_array+="]"
                echo "$response_array"
            else
                echo "$(jq -n --arg file "$output_file" '{file: $file}')"
            fi
        else
            # Send the request to the API
            response=$(curl -X POST -H "Authorization: Bearer $OPENAI_API_KEY" -H "Content-Type: multipart/form-data" -F "file=@$file" -F "model=$model" -F "language=$language" -F "prompt=$prompt" -F "response_format=$response_format" -F "temperature=$temperature" -F "timestamp_granularities[]=$timestamp_granularities" -F "model=$model" --silent --max-time 60 https://api.openai.com/v1/audio/transcriptions)

            # Check if the response is valid JSON and contains 'text' field
            if echo "$response" | jq -e . >/dev/null 2>&1 && echo "$response" | jq 'has("text")' | grep -q true; then
                # If verbose mode, store entire response, else extract text
                if [[ "$verbose" = true ]]; then
                    # Check if 'segments' property is not null
                    if echo "$response" | jq 'has("segments")' | grep -q true; then
                        # Limit the length of the 'segments.text' property to 140 characters
                        response=$(echo "$response" | jq '.segments[].text = (.segments[].text | .[0:140] + "...")')
                        response_array+="$response,"
                    fi
                else
                    echo "$(echo "$response" | jq -r '.text')" >> "$output_file"
                fi
            else
                echo "Error: Invalid response from API"
                echo "Response: $response"
                exit 1
            fi
        fi

        # Get the relative path of the output file
        [[ "$verbose" == true ]] && echo "$response" | jq -r || echo "{ \"file\": \"$(basename "$output_file")\" }"
        



esac