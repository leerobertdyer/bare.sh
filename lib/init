#!/usr/bin/env bash
set -e
BARE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)" && export BARE_DIR

cd "$BARE_DIR"

[[ ! -f "$BARE_DIR"/lib/.env ]] && cp "$BARE_DIR"/lib/samples/.env lib/.env

source "$BARE_DIR"/lib/.env
export NB_DIR="$BARE_NOTES_DIR"

source "$BARE_DIR"/lib/colors
source "$BARE_DIR"/lib/deps


declare -A core_env

core_env=(
	["BARE_ENCRYPTION_KEY"]="used for encryption tools"
	["OPENAI_API_KEY"]="used for OpenAI interfacing"
	["STRIPE_SECRET_KEY"]="used for Stripe intrefacing"
	["BARE_EDITOR"]="Used for command line note editing (defaults to vim)"
)

for key in "${!core_env[@]}"; do
	if [[ -z "${!key}" ]]; then
		echo -e "${RED}Error: ${key} is not set${NC}"
		echo -e "${key} is ${core_env[$key]}"
		read -rp "Please enter a value for ${key} (or press enter to skip): " value
		if [[ -n $value ]]; then
			perl -i -pe "s/${key}=.*/${key}=${value}/g" lib/.env
		else
			# set dummy value
			perl -i -pe "s/${key}=.*/${key}=xxxxxxxxxx/g" lib/.env
		fi
	fi
done

# if encryption key is still not set, don't ask user, just set it to a random value
[[ -z "$BARE_ENCRYPTION_KEY" ]] && {
	echo -e "Setting BARE_ENCRYPTION_KEY to a random value"
	perl -i -pe "s/BARE_ENCRYPTION_KEY=.*/BARE_ENCRYPTION_KEY=$(openssl rand -base64 32)/g" lib/.env
}

source "$BARE_DIR"/lib/.env



function inspect() {

	[[ $1 == '--inspect' ]] && {

		[[ -z "$doc" ]] && echo "No documentation found" && exit 1

		process_line() {
			local prefix=$1
			local max_length=$2
			local line=$3

			if [[ $line == $prefix* ]]; then
				line=$(echo "$line" | tr '\t' ' ' | tr -s ' ' | sed 's/^ *//;s/ *$//')
				IFS='|' read -r first_col second_col <<< "$line"
				if [[ $prefix == '>' ]]; then
					# For examples, strip the > and preceding space, then print the second column as a comment before the command in a code block
					first_col=${first_col//^> /}
					printf "\`\`\`bash\n#%s\n%s\n\`\`\`\n" "${second_col}" "${first_col}"
				else
					# For options, print the second column as a column
					printf "%s %s\n" "$first_col" "$second_col"
				fi
			fi
		}

		calculate_max_length() {
			local prefix=$1
			local max_length=0

			while IFS= read -r line; do
				if [[ $line == $prefix* ]]; then
					line=$(echo "$line" | tr '\t' ' ' | tr -s ' ' | sed 's/^ *//;s/ *$//')
					IFS='|' read -r first_col second_col <<< "$line"
					length=${#first_col}
					(( length > max_length )) && max_length=$length
				fi
			done <<< "$doc"

			echo $((max_length + 4))
		}

		max_length_options=$(calculate_max_length '\`')
		max_length_examples=$(calculate_max_length '>')

		while IFS= read -r line; do
			line=$(echo "$line" | tr '\t' ' ' | tr -s ' ' | sed 's/^ *//;s/ *$//')
			if [[ $line == \#* ]]; then
				echo "$line"
			elif [[ $line == \`* ]]; then
				[[ -z $options ]] && echo -e "## Options\n" && options=1
				process_line '\`' "$max_length_options" "$line"
			elif [[ $line == \>* ]]; then
				[[ -z $examples ]] && echo -e "## Examples\n" && examples=1
				process_line '>' "$max_length_examples" "$line"
			else
				echo "$line"
			fi
		done <<< "$doc" | glow && exit 0
	}

	return 0
}